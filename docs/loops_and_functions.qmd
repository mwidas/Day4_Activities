---
title: "Day4_activities"
format: html
editor: visual
execute:
  warning: FALSE
---

```{r}
library(tidyverse)
```

## Task 1

```{r}
weekdays <- c("Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday", "Sunday")

transects <- c("Transect A", "Transect B", "Transect C")

#make sure to look at rows and columns what you need for output matrix when making your empty matrix
out_matrix <- matrix(nrow = length(weekdays), ncol = length(transects)) 

for (i in seq_along(transects)) {
  for (j in seq_along(weekdays)) {
   fill <- paste(weekdays[j], "-", transects[i])
   out_matrix[j, i] <- fill
  }
}
out_matrix                    
```

## Task 2

```{r}
force <- function(mass, acceleration) {
  force_calc <- mass * acceleration
  print(paste("The resulting force is", force_calc, "Newtons" ))
}

force(1, 3)
```

## Task 3

```{r}
fish_parms <- data.frame(sci_name = c("Chanos chanos", "Sphyraena barracuda", "Caranx ignobilis"),
                         common_name = c("Milkfish", "Great Barracuda", "Giant trevally"),
                         a_est = c(0.0905, 0.0181, 0.0353),
                         b_est = c(2.52, 3.27, 3.05))

fish_parms

```

```{r}
# filtering the data set for common name and fish name is being used instead
# show me this equation of the fish weight calculation

fish_weight <- function(fish_name, total_length) {
  fish_sub <- dplyr::filter(fish_parms, common_name == fish_name)
  print((fish_sub$a_est) * (total_length ^ fish_sub$b_est))
}

fish_weight("Milkfish", 7)
```

```{r}
# make a vector from 0 to 100 by increments of 1

fish_lengths_vec <- seq(from = 0, to = 100, by = 1)

# make a vector to store what my function is going to make 

milkfish_weights <- vector(mode = "numeric", length = length(fish_lengths_vec))

# apply my function to the milkfish category and use the fish lengths vector that is iterated over 

for (i in 1:length(fish_lengths_vec)) {
  lengths <- fish_weight("Milkfish", fish_lengths_vec[i])
  milkfish_weights[i] <- lengths
}
```

## Task 4

```{r}
wave_height <- seq(from = 0, to = 3, by = 0.2)

wave_power <- function(wave_height, period) {
  power <- 0.5 * (wave_height ^ 2) * period
  print(paste(power))
}

wave_power(wave_height, 8)
```

## Task 5

```{r}
wave_power_2 <- function(water_depth, wave_height, period) {
  if (water_depth <= 12) {
    message("Shallow water equation used")
   paste(0.81 * (wave_height ^ 2) * period)
  } else if (water_depth > 12 ) {
    message("Deep water equation used")
   paste(0.5 * (wave_height ^ 2) * period)
  }
}

wave_power_2(2, 3, 2)

wave_power_2(14, 3, 2)
```
